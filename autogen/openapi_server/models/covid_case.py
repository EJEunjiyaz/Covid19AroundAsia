# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class CovidCase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country=None, confirmed=None, deaths=None):  # noqa: E501
        """CovidCase - a model defined in OpenAPI

        :param country: The country of this CovidCase.  # noqa: E501
        :type country: str
        :param confirmed: The confirmed of this CovidCase.  # noqa: E501
        :type confirmed: float
        :param deaths: The deaths of this CovidCase.  # noqa: E501
        :type deaths: float
        """
        self.openapi_types = {
            'country': str,
            'confirmed': float,
            'deaths': float
        }

        self.attribute_map = {
            'country': 'country',
            'confirmed': 'confirmed',
            'deaths': 'deaths'
        }

        self._country = country
        self._confirmed = confirmed
        self._deaths = deaths

    @classmethod
    def from_dict(cls, dikt) -> 'CovidCase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CovidCase of this CovidCase.  # noqa: E501
        :rtype: CovidCase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this CovidCase.


        :return: The country of this CovidCase.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CovidCase.


        :param country: The country of this CovidCase.
        :type country: str
        """

        self._country = country

    @property
    def confirmed(self):
        """Gets the confirmed of this CovidCase.


        :return: The confirmed of this CovidCase.
        :rtype: float
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this CovidCase.


        :param confirmed: The confirmed of this CovidCase.
        :type confirmed: float
        """

        self._confirmed = confirmed

    @property
    def deaths(self):
        """Gets the deaths of this CovidCase.


        :return: The deaths of this CovidCase.
        :rtype: float
        """
        return self._deaths

    @deaths.setter
    def deaths(self, deaths):
        """Sets the deaths of this CovidCase.


        :param deaths: The deaths of this CovidCase.
        :type deaths: float
        """

        self._deaths = deaths
